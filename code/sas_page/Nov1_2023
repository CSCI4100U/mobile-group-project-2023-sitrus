import 'package:flutter/material.dart';

//import 'package:flutter/material.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
//import 'package:cloud_firestore/cloud_firestore.dart';


void main() async {
  WidgetsFlutterBinding.ensureInitialized();
//  await Firebase.initializeApp();
  runApp(const MyApp());
}

class SampleMain extends StatefulWidget {
  @override
  SampleMainState createState() => SampleMainState();
}

class SampleMainState extends State<SampleMain> {
  @override
  void initState() {
    super.initState();
    //_refreshList(); // Initialize _grades inside initState
  }
//REFERENCE
  //https://stackoverflow.com/questions/71288720/how-can-i-create-a-list-of-buttons-in-listview-builder-that-coincide-with-the-la





  List<String> pages = ["thing", "idk", "help", "me", "My Accommodations"];
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Example Main'),
        backgroundColor: Colors.blue,
      ),
      body: ListView.builder(
        itemCount: pages.length,
        itemBuilder: (BuildContext context, index) {
          return ListTile(
            title: Text(pages[index]),
            trailing: Icon(Icons.info_outlined),
            onTap: () {
              _toSAS(context);
            },
          );
        },
      ),
     /* floatingActionButton: FloatingActionButton(
        onPressed: () {
          //print ("Add button printed");
          _toSAS(context);
        },
        child: Icon(Icons.add),
      ),*/
    );
  }



  Future<void> _toSAS(BuildContext context) async {
    final result = await Navigator.of(context).push(
      MaterialPageRoute<List<String>>(builder: (BuildContext context) {
        return SASPage();
      }),
    );

    if (result != null) {
    }
  }


}


class SASPage extends StatefulWidget {
  @override
  SASPageState createState() => SASPageState();
}

class SASPageState extends State<SASPage> {

  SASModel sas_model = SASModel();

  List<Accessibility> _accommodations = [];

  @override
  void initState() {
    super.initState();
    _refreshList(); // Initialize _grades inside initState
  }

  void _refreshList() async {
    final List<Accessibility> accommodations = await sas_model.getAll();
    setState(() {
      _accommodations = accommodations;
    });
  }


  String selectedGrade = "Not Available";
  List<String> gradeOptions = ["Not Available", "Deadline Extension", "Accommodated Testing", "Sign Language Interpretation (ASL)", "Extra time", "Computerized Notetaking",
  "Alternative Testing space", "Scribe"];
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Your Accommodations'),
        backgroundColor: Colors.blue,
      ),
      body: ListView.builder(
        itemCount: _accommodations.length,
        itemBuilder: (context, index) {
          return ListTile(
            title: Text(_accommodations[index].name ?? "NA"),
            subtitle: Text(_accommodations[index].notes ?? "NA"),
            onTap: () {
              _editAcmdn(context, _accommodations[index]);
            },
            trailing: IconButton(
              icon: Icon(Icons.delete),
              onPressed: () {
                _deleteAcmdn(_accommodations[index].id);
              },
            ),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          print ("Add button printed");
          _addAcmdn(context);
        },
        child: Icon(Icons.add),
      ),
    );
  }


//Note: Using a page bc of how long accessibility names are rip
  Future<void> _addAcmdn(BuildContext context) async {
    final result = await Navigator.of(context).push(
      MaterialPageRoute<List<String>>(builder: (BuildContext context) {
        return AddAccommodation();
      }),
    );

    if (result != null) {
      // Handle the result, which contains the studentId and grade
      final studentId = result[0];
      final g = result[1];
      sas_model.insertAcmdn(Accessibility(name: g, notes: studentId));
      _refreshList();
      // Perform any additional logic, such as adding the new grade to the list or database
    }
  }

  Future<void> _editAcmdn(BuildContext context, Accessibility acmdn) async {
    final editedAcmdn = await showDialog<Accessibility>(
      context: context,
      builder: (BuildContext context) {
        final notesController = TextEditingController(text: acmdn.notes);
        final nameController = TextEditingController(text: acmdn.name);

        return AlertDialog(
          title: Text('Edit'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: <Widget>[
              TextField(
                controller: notesController,
                decoration: InputDecoration(labelText: 'Notes'),
              ),
              TextField(
                controller: nameController,
                decoration: InputDecoration(labelText: 'Name'),
              ),
            ],
          ),
          actions: <Widget>[
            TextButton(
              child: Text('Cancel'),
              onPressed: () {
                Navigator.of(context).pop(null);
              },
            ),
            TextButton(
              child: Text('Save'),
              onPressed: () {
                final editedNotes = notesController.text;
                final editedName = nameController.text;

                if (editedNotes.isNotEmpty && editedName.isNotEmpty) {
                  final updatedAcmdn = Accessibility(
                    id: acmdn.id,
                    notes: editedNotes,
                    name: editedName,
                  );
                  Navigator.of(context).pop(updatedAcmdn);
                }
              },
            ),
          ],
        );
      },
    );

    if (editedAcmdn != null) {
      final rowsUpdated = await sas_model.updateAcmdn(editedAcmdn);

      if (rowsUpdated > 0) {
        // The update was successful, update the list of grades
        _refreshList();
      }
    }}
  Future<void> _deleteAcmdn(int? id) async {
    // Delete the grade from the database and get the number of rows deleted
    final rowsDeleted = await sas_model.deleteAcmdnById(id);

    if (rowsDeleted > 0) {
      // The deletion was successful, update the list of grades
      _refreshList();
    }
  }
}

class AddAccommodation extends StatefulWidget {
  AddAccommodation();

  @override
  AddAccommodation_State createState() => AddAccommodation_State();


}
class AddAccommodation_State extends State<AddAccommodation> {
  String selectedOption = "Not Available";
  List<String> Options = ["Not Available", "Deadline Extension", "Accommodated Testing", "Sign Language Interpretation (ASL)", "Extra time", "Computerized Notetaking",
    "Alternative Testing space", "Scribe"];
  final studentIdController = TextEditingController();
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Add'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [

            DropdownButton<String>(
              value: selectedOption,
              onChanged: (String? newValue) {
                setState(() {
                  selectedOption = newValue!;
                });
              },
              items: Options.map((String grade) {
                return DropdownMenuItem<String>(
                  value: grade,
                  child: Text(grade),
                );
              }).toList(),
            ),
            TextField(
              controller: studentIdController,
              decoration: InputDecoration(labelText: 'notes'),
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          String n = studentIdController.text;
          String g = selectedOption;
          final newAcmdn = Accessibility(
            notes: n,
            name: g,
          );

          SASModel gradesModel=new SASModel();
          gradesModel.insertAcmdn(newAcmdn).then((newNotes) {
            if (newNotes != null) {
              //Navigator.of(context).pop(newGrade);
              Navigator.of(context).push(
                MaterialPageRoute<List<String>>(builder: (BuildContext context) {
                  return SASPage();
                }),
              );
            }
          });
        },
        child: Icon(Icons.save),
      ),
    );
  }
}

//-----------------------------------------------------------------
class DBUtils{
  static Future init() async{
    late Database db;
    final databasePath = await getDatabasesPath();
    final path = join(databasePath, 'accessibility.db');


    db = await openDatabase(path, version: 1, onCreate: (Database db, int version) {

      db.execute('''
        CREATE TABLE accessibility (
          id INTEGER PRIMARY KEY,
          name TEXT,
          notes TEXT
        )
      ''');
    });


    return db;
  }
}
/*
class GradeWidget extends StatefulWidget {
  GradeWidget();

  @override
  GradeWidget_State createState() => GradeWidget_State();


}
class GradeWidget_State extends State<GradeWidget> {
  String selectedGrade = "A"; // Default grade
  final studentIdController = TextEditingController();
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Add Grade'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: studentIdController,
              decoration: InputDecoration(labelText: 'Student ID'),
            ),
            DropdownButton<String>(
              value: selectedGrade,
              onChanged: (String? newValue) {
                setState(() {
                  selectedGrade = newValue!;
                });
              },
              items: ["A+","A", "A-", "B+", "B", "B-", "C", "D", "F"].map((String grade) {
                return DropdownMenuItem<String>(
                  value: grade,
                  child: Text(grade),
                );
              }).toList(),
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          String studentId = studentIdController.text;
          String g = selectedGrade;
          final newGrade = Accessibility(
            notes: studentId,
            name: g,
          );

          GradesModel gradesModel=new GradesModel();
          gradesModel.insertGrade(newGrade).then((newGradeId) {
            if (newGradeId != null) {
              //Navigator.of(context).pop(newGrade);
              Navigator.of(context).push(
                MaterialPageRoute<List<String>>(builder: (BuildContext context) {
                  return ListGrades();
                }),
              );
            }
            //ListGradesState();
          });
        },
        child: Icon(Icons.save),
      ),
    );
  }
}
*/
//------------------------------------------------------------------------------

class SASModel{

  //Grade_Model grade_model=Grade_Model();
  Future<List<Accessibility>> getAll() async {
    final db = await DBUtils.init();
    final List<Map<String, dynamic>> gradeMaps = await db.query('accessibility');

    List<Accessibility> accommodations = [];

    for (var map in gradeMaps) {

      accommodations.add(Accessibility.fromMap(map));
    }

    return accommodations;
  }

  Future<int> insertAcmdn(Accessibility g) async {
    final db = await DBUtils.init();
    final id = await db.insert(
      'accessibility',
      g.toMap(),
      conflictAlgorithm: ConflictAlgorithm.replace,
    );
    return id;
  }

  Future<int> updateAcmdn(Accessibility g) async {
    final db = await DBUtils.init();
    final rowsUpdated = await db.update(
      'accessibility',
      g.toMap(),
      where: 'id = ?',
      whereArgs: [g.id],
    );
    return rowsUpdated;
  }

  Future<int> deleteAcmdnById(int? id) async {
    final db = await DBUtils.init();
    final rowsDeleted = await db.delete(
      'accessibility',
      where: 'id = ?',
      whereArgs: [id],
    );
    return rowsDeleted;
  }
}



//--------------------------------------------------------------------------------
class Accessibility{
  Accessibility({this.id, this.name, this.notes});
  int? id;
  //String? Student;
  String? name;
  String? notes;

  Map<String, Object?> toMap() {
    return {
      'id': id,
      'name': name,
      'notes': notes,
    };
  }

  Accessibility.fromMap(Map map) {

    this.id=map['id'];
    this.name=map['name'];
    this.notes=map['notes'];
  }

}


class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // TRY THIS: Try running your application with "flutter run". You'll see
        // the application has a blue toolbar. Then, without quitting the app,
        // try changing the seedColor in the colorScheme below to Colors.green
        // and then invoke "hot reload" (save your changes or press the "hot
        // reload" button in a Flutter-supported IDE, or press "r" if you used
        // the command line to start the app).
        //
        // Notice that the counter didn't reset back to zero; the application
        // state is not lost during the reload. To reset the state, use hot
        // restart instead.
        //
        // This works for code too, not just values: Most code changes can be
        // tested with just a hot reload.
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: SampleMain(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // TRY THIS: Try changing the color here to a specific color (to
        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar
        // change color while the other colors stay the same.
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          //
          // TRY THIS: Invoke "debug painting" (choose the "Toggle Debug Paint"
          // action in the IDE, or press "p" in the console), to see the
          // wireframe for each widget.
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
